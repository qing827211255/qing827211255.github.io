<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>胡迪的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-11T03:34:28.539Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Helen Hu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/10/11/hello-world/"/>
    <id>http://yoursite.com/2019/10/11/hello-world/</id>
    <published>2019-10-11T03:34:28.539Z</published>
    <updated>2019-10-11T03:34:28.539Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>面试中不可不知道的node.js与es6重要知识点梳理</title>
    <link href="http://yoursite.com/2018/10/16/node.js&amp;es6/"/>
    <id>http://yoursite.com/2018/10/16/node.js&amp;es6/</id>
    <published>2018-10-15T16:00:00.000Z</published>
    <updated>2019-10-17T01:50:06.815Z</updated>
    
    <content type="html"><![CDATA[<h2 id="es6-在面试过程中被提及的概率很大"><a href="#es6-在面试过程中被提及的概率很大" class="headerlink" title="es6(在面试过程中被提及的概率很大)"></a>es6(在面试过程中被提及的概率很大)</h2><ul><li>箭头函数中this指向</li></ul><blockquote><p>箭头函数没有自己的this,它的this来自外部对象的this,箭头函数的this是在定义函数时绑定的，不&gt;是在执行过程中绑定的。即函数在定义时，this就继承了定义函数的对象。</p></blockquote><ul><li>let/const/var的区别<blockquote><p><strong><code>let</code></strong>是定义变量的关键字,它没有变量提升,必须先定义再使用,且不能重复定义,它具有块级作用域,let定义的全局变量不会附加到window对象的属性中(不同通过window调用)</p></blockquote></li></ul><blockquote><p><strong><code>const</code></strong>是定义常量的,也就是数据只读,不可以修改,const定义的常量名,常量名一般采用全大写的方式,一旦定义就不能修改,一旦声明，就必须立即初始化,具有块级作用域,没有变量提升，必须先定义再使用,const实际上保证的，并不是常量的值不得改动，而是只能保证这个指针是固定的（即总是指向一个固定的地址）</p></blockquote><blockquote><p><strong><code>var</code></strong>定义变量会产生变量的提升,var可以通过window调用,没有块级作用域</p></blockquote><pre><code>关于var const let 总结</code></pre><table><thead><tr><th align="center">关键字</th><th align="center">变量提升</th><th align="center">块级作用域</th><th align="center">初始值</th><th align="center">更改值</th><th align="center">通过window调用</th></tr></thead><tbody><tr><td align="center">let</td><td align="center">×</td><td align="center">√</td><td align="center">-</td><td align="center">Yes</td><td align="center">No</td></tr><tr><td align="center">const</td><td align="center">×</td><td align="center">√</td><td align="center">Yes</td><td align="center">No</td><td align="center">No</td></tr><tr><td align="center">var</td><td align="center">√</td><td align="center">×</td><td align="center">-</td><td align="center">Yes</td><td align="center">Yes</td></tr></tbody></table><ul><li>解构赋值(数组,对象)–重要的</li></ul><blockquote><p>ES 6 允许从数组和对象中提取值，对变量进行赋值<br>解构:从数组和对象中提取值<br>赋值:把解构之后的值保存到变量</p></blockquote><ul><li>array对象的拓展</li></ul><blockquote><ol><li>扩展运算符  (语法:console.log(…[1,2,3]);)它的作用是把数组中的元素一项项地展开：把一个整体的数组拆开成单个的元素。</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">应用一:数组拷贝</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [...arr1]</span><br><span class="line">应用二:数组合并</span><br><span class="line"><span class="keyword">var</span> arr0 = [<span class="string">'a'</span>,<span class="string">'b'</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>, ...arr1];</span><br><span class="line"><span class="keyword">var</span> arr3 = [...arr0 ,...arr1];</span><br><span class="line">应用三:<span class="built_in">Math</span>.max()</span><br><span class="line"><span class="built_in">Math</span>.max(<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">6</span>];</span><br><span class="line"><span class="built_in">Math</span>.max(...arr);</span><br><span class="line"><span class="comment">// 或者 Math.max.apply(this,[1,2,3,566])</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>Array.from()方法<br>数组 = Array.from(非数组对象)</li></ol></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3.</span> <span class="built_in">Array</span>.find()方法 </span><br><span class="line">查找到是数组中的元素</span><br><span class="line"><span class="keyword">let</span> result = 数组.find(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,self</span>)</span>&#123; </span><br><span class="line">    <span class="comment">//.... </span></span><br><span class="line">    <span class="comment">// 如果满足查找的条件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>Array.findIndex()方法<br>它查找的数组中的元素的下标。</li></ol></blockquote><blockquote><ol start="5"><li>Array.inclues()方法<br>数组.includes(表示查找的内容，表示开始查找的位置)  参数2为可选项</li></ol></blockquote><ul><li>class类/实现继承</li></ul><blockquote><p>class实现继承的方式为extends</p></blockquote><ul><li>set对象拓展</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set</span>是ES6 中新增的内置对象，类似于数组，但是成员的值没有重复的值。</span><br><span class="line">* 应用场景:数组去重</span><br><span class="line">案例一:<span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log([...new <span class="built_in">Set</span>(arr)])</span><br><span class="line"></span><br><span class="line">案例二:<span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">[<span class="number">2</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">2</span>].forEach(<span class="function"><span class="params">x</span>=&gt;</span>s.add(x));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">of</span> s)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 3 5 4  </span></span><br><span class="line"><span class="comment">//案例二代码摘自阮一峰书</span></span><br></pre></td></tr></table></figure><blockquote><ul><li>Set 的成员方法<br>size：属性，获取 set 中成员的个数，相当于数组中的 length<br>add(value)：添加某个值，返回 Set 结构本身。<br>delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。<br>has(value)：返回一个布尔值，表示该值是否为Set的成员。<br>clear()：清除所有成员，没有返回值。<br>forEach:遍历</li></ul></blockquote><ul><li>新增的数据类型以及含义</li></ul><blockquote><p>*ES6 引入了一种新的原始数据类型Symbol，表示独一无二的值。<br>Symbol 值通过Symbol函数生成。这就是说，对象的属性名现在可以有两种类型，一种是原来就有的字符串，另一种就是新增的 Symbol 类型。凡是属性名属于 Symbol 类型，就都是独一无二的，可以保证不会与其他属性名产生冲突。</p></blockquote><blockquote><p>Symbol函数前不能使用new命令，否则会报错。这是因为生成的 Symbol 是一个原始类型的值，不是对象。也就是说，由于 Symbol 值不是对象，所以不能添加属性。基本上，它是一种类似于字符串的数据类型。</p></blockquote><ul><li>async/await的基本含义</li></ul><blockquote><p>async它用来修饰一个函数，会返回一个promise对象，可以使用then方法添加回调函数。当函数执行时，如果遇到 了await就会先返回，等 到异步操作完成，再接着执行函数体后面的语句。</p></blockquote><blockquote><p>await接一个promise对象， 它会自动解析这个promise对象中的promiseValue。只能出现在async函数中。一般在后面接一个函数，而这个函数会返回一个promise对象</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filename, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          resolve(<span class="literal">null</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dosomethin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rs = <span class="keyword">await</span> readFile();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Promise的基本使用以及几个状态常见的含义—重要的</li></ul><blockquote><p>promise有三种状态:pending(就绪),resolved(成功解决),rejected(拒绝)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">示例:</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFile</span>(<span class="params">filename</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.readFile(filename, <span class="string">'utf8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        reject(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">readFile(<span class="string">'./server.js1'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">rs</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(rs);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err'</span>, err);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><ul><li>npm是什么?如何去发布一个自己的包</li></ul><blockquote><p>npm是包管理工具<br>先准备好自己要发布的包,然后执行以下命令npm adduser/npm login —–&gt;npm pulish</p></blockquote><ul><li>除了npm还是用过其它的包管理工具吗?</li></ul><blockquote><p>yarn 还有 cnpm</p></blockquote><ul><li>node中的模块是什么,什么是模块加载机制?</li></ul><blockquote><p>一个js文件中可以引入其他的js文件，能使用引入的js文件的中的变量、数据，这种特性就称为模块化。</p></blockquote><blockquote><p>模块加载机制:<br>内部模块 - node.js提供的模块如 fs,http,path等<br>自定模块 - 我们自己写的模块<br>第三方模块 - 通过npm安装的模块<br>使用require引入相应的模块，即可使用。</p></blockquote><ul><li>简述一下什么是事件循环 <strong>eventloop</strong>  </li></ul><p><img alt="1571186917466" data-src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571186917466.png" class="lozad"></p><blockquote><p>*Event Loop即事件循环，是指浏览器或Node的一种解决javaScript单线程运行时不会阻塞的一种机制，也就是我们经常使用异步的原理。</p></blockquote><blockquote><p>*JS是单线程执行的，而基于事件循环模型，形成了基本没有阻塞（除了alert或同步XHR等操作）的状态<br>————————————————</p></blockquote><blockquote><p>*JavaScript的事件分两种，宏任务(macro-task)和微任务(micro-task)<br>宏任务：包括整体代码script，setTimeout，setInterval<br>微任务：Promise.then(非new Promise)，process.nextTick(node中)</p></blockquote><blockquote><p>*执行栈在执行完同步任务后，查看执行栈是否为空，如果执行栈为空，就会去检查微任务(microTask)队列是否为空，如果为空的话，就执行Task（宏任务），否则就一次性执行完所有微任务。<br>每次单个宏任务执行完毕后，检查微任务(microTask)队列是否为空，如果不为空的话，会按照先入先出的规则全部执行完微任务(microTask)后，设置微任务(microTask)队列为null，然后再执行宏任务，如此循环。</p></blockquote><p>链接：<a href="https://juejin.im/post/5c3d8956e51d4511dc72c200" target="_blank" rel="noopener">https://juejin.im/post/5c3d8956e51d4511dc72c200</a></p><ul><li>什么是事件驱动/和非阻塞I/O模型?</li></ul><blockquote><p>*事件驱动模型是一种响应事件模型，事件驱动就是在持续事务管理的过程中，由当前时间点上出现的事件引发的调动可用资源执行相关任务，解决不断出现的问题，防止事务堆积的一种策略。</p></blockquote><ul><li>简单描述一下为什么会产生跨域问题,该如何解决?</li></ul><blockquote><p>浏览器出于安全而有同源策略,即协议,端口,域名的必须一致,非同源策略就会产生跨域问题</p></blockquote><blockquote><p>解决方法一:jsonp跨域<br>解决方法二:cors 跨域资源共享,允许发送ajax</p></blockquote><ul><li>jsonp的原理是什么?</li></ul><blockquote><p>利用标签请求资源不受同源策略限制的特点,创建script标签,指定src,利用标签把请求发出去,定义好一个处理事件,把数据梳理函数的名称传给后端,后端返回符合js函数调用语法的字符串</p></blockquote><ul><li>express是什么?还使用过类似的东西吗?</li></ul><blockquote><p>express是一种框架,Koa,Meteor,socketstream ,Sails.js </p></blockquote><ul><li>使用node.js还能干些什么<blockquote></blockquote></li></ul><p>*Web开发：Express + EJS + Mongoose/MySQL<br>*REST开发：Restify<br>*Web聊天室(IM)：Express + Socket.io<br>*Web爬虫：Cheerio/Request<br>*Web博客：Hexo</p><ul><li>Web论坛: nodeclub    </li><li>Web幻灯片：Cleaver    </li><li>前端包管理平台: bower.js</li><li>OAuth认证：Passport</li><li>定时任务工具: later</li><li>浏览器环境工具: browserify</li><li>命令行编程工具：Commander</li><li>Web控制台工具: tty.js</li><li>客户端应用工具: node-webwit</li><li>操作系统: node-os</li></ul><h2 id="预习Vue"><a href="#预习Vue" class="headerlink" title="预习Vue"></a>预习<a href="https://cn.vuejs.org" target="_blank" rel="noopener">Vue</a></h2><ul><li>Vue是什么?</li></ul><blockquote><p>是一套用于构建用户界面的渐进式框架。</p></blockquote><ul><li>什么是SPA</li></ul><blockquote></blockquote><p>Single Page Application（单页应用程序）<br>就是只有一个Web页面的应用，是加载单个HTML页面，并在用户与应用程序交互时动态更新该页面的Web应用程序。</p><blockquote></blockquote><p>优势：</p><blockquote></blockquote><p>   1 减少了请求体积，加快页面响应速度，降低了对服务器的压力<br>   2 更好的用户体验，让用户在web app感受native app的流畅<br>缺点：<br>   因为技术使用了ajax，导致页面不利于SEO，但是可以通过其他技术去规避<br>  （SEO原则：搜索引擎的蜘蛛只识别href的一般超链接，而不识别JavaScript代码，遇到一般超链接就会爬进去，遇到JavaScript不会爬进去。即，搜索引擎抓不到AJAX动态加载的内容。）<br>   1）服务端渲染  2）页面静态化（专门为爬虫准备的）<br>主要技术点：</p><blockquote></blockquote><p>1 ajax<br>2 锚点的使用（window.location.hash #）<br>3 hashchange 事件</p><ul><li><p>什么是mvvm?和mvc之间的区别是什么</p><blockquote></blockquote><p>MVC即model，view，control，jQuery就是采用的这种设计模式<br>MVVM即model，view，viewmodel，它是数据驱动模式，即所有的一切通过操作数据来进行，而尽量避免操作dom树。</p></li><li><p>如何去创建一个vue实例</p></li></ul><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;1. body中,设置Vue管理的视图&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;</span><br><span class="line">&gt;2. 引入vue.js</span><br><span class="line">&gt;3. 实例化Vue对象 new Vue();</span><br><span class="line">&gt;4. 设置Vue实例的选项:如el、data...     </span><br><span class="line">&gt;new Vue(&#123;选项:值&#125;);</span><br><span class="line">&gt;5. 在&lt;div id=&apos;app&apos;&gt;&lt;/div&gt;中通过&#123;&#123; &#125;&#125;使用data中的数据</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><ul><li>使用哪个指令实现数据双向绑定?</li></ul><blockquote><p>使用v-model指令，可以实现表单元素和Model中数据的双向绑定，并且v-model指令只能运用在表单元素中。</p></blockquote><ul><li>学会查阅官方API</li></ul><p>好哒~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;es6-在面试过程中被提及的概率很大&quot;&gt;&lt;a href=&quot;#es6-在面试过程中被提及的概率很大&quot; class=&quot;headerlink&quot; title=&quot;es6(在面试过程中被提及的概率很大)&quot;&gt;&lt;/a&gt;es6(在面试过程中被提及的概率很大)&lt;/h2&gt;&lt;ul&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
      <category term="ES6" scheme="http://yoursite.com/categories/Javascript/ES6/"/>
    
    
      <category term="知识点" scheme="http://yoursite.com/tags/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
  </entry>
  
</feed>
